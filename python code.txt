from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
import time
import csv

# Basic Crawling
def basic_crawling():
    # Set up WebDriver
    service = Service('path/to/chromedriver')
    driver = webdriver.Chrome(service=service)

    try:
        # Open Amazon India
        driver.get("https://www.amazon.in")
        time.sleep(3)

        # Search for a product
        search_box = driver.find_element(By.ID, "twotabsearchtextbox")
        search_box.send_keys("laptop")
        search_box.send_keys(Keys.RETURN)
        time.sleep(3)

        # Extract product details
        products = driver.find_elements(By.CSS_SELECTOR, ".s-main-slot .s-result-item")
        with open("products.csv", mode="w", newline="", encoding="utf-8") as file:
            writer = csv.writer(file)
            writer.writerow(["Name", "Price", "Rating", "URL"])

            for product in products:
                try:
                    name = product.find_element(By.CSS_SELECTOR, "h2").text
                    price = product.find_element(By.CSS_SELECTOR, ".a-price-whole").text
                    rating = product.find_element(By.CSS_SELECTOR, ".a-icon-alt").get_attribute("innerHTML")
                    url = product.find_element(By.CSS_SELECTOR, "h2 a").get_attribute("href")

                    # Write to CSV
                    writer.writerow([name, price, rating, url])
                except Exception as e:
                    # Ignore products with missing details
                    pass

    except Exception as e:
        print(f"Error: {e}")
    finally:
        driver.quit()

# Functional Testing
def validate_product_page(driver, product_url):
    try:
        # Navigate to product page
        driver.get(product_url)
        time.sleep(3)

        # Validate "Add to Cart" button
        is_add_to_cart_present = len(driver.find_elements(By.ID, "add-to-cart-button")) > 0
        print("Add to Cart button:", "PASS" if is_add_to_cart_present else "FAIL")

        # Validate Product Details
        is_product_details_present = len(driver.find_elements(By.ID, "productDescription")) > 0
        print("Product Description:", "PASS" if is_product_details_present else "FAIL")

        # Validate Image Gallery
        is_image_gallery_present = len(driver.find_elements(By.ID, "imageBlockContainer")) > 0
        print("Image Gallery:", "PASS" if is_image_gallery_present else "FAIL")

    except Exception as e:
        print(f"Error: {e}")

# Reporting
def log_test_result(test_name, result):
    try:
        with open("test_results.log", mode="a", encoding="utf-8") as log_file:
            log_file.write(f"{test_name}: {'PASS' if result else 'FAIL'}\n")
    except Exception as e:
        print(f"Error logging test result: {e}")

# Bonus Tasks - Pagination
def handle_pagination(driver):
    while len(driver.find_elements(By.CSS_SELECTOR, ".s-pagination-next")) > 0:
        next_button = driver.find_element(By.CSS_SELECTOR, ".s-pagination-next")
        next_button.click()
        time.sleep(3)
        # Re-extract product details here

# Selenium Grid Setup
def selenium_grid_example():
    capabilities = DesiredCapabilities.CHROME.copy()
    capabilities['browserName'] = 'chrome'

    driver = webdriver.Remote(
        command_executor='http://localhost:4444/wd/hub',
        desired_capabilities=capabilities
    )

    try:
        # Test Desktop
        driver.set_window_size(1920, 1080)
        basic_crawling()

        # Test Mobile
        driver.set_window_size(375, 812)
        basic_crawling()

    finally:
        driver.quit()

if __name__ == "__main__":
    # Example Usage
    basic_crawling()
    # To test functional validation, pass the driver and product URL
    # validate_product_page(driver, "https://www.amazon.in/dp/example")
